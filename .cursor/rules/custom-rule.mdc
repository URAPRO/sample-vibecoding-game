---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules

## 基本ルール

1. **新機能実装の流れ**
   - memory-bank内のドキュメントを読み、アプリに新機能を追加する
   - テストが成功したら、progress.mdに進捗を記録する
   - architecture.mdにアーキテクチャの変更点を記述する
   - 実装時にゲーム仕様の詳細を定めた場合、GDDへフィードバックを更新する

2. **バージョン実装**
   - 「vX.Xを実装してください」というリクエストを受けた場合:
     - memory-bank内のGDDを確認し、実装するバージョンの要件を理解する
     - implementation-plan.mdに記載されたフェーズとステップに従って実装を進める
     - 各ステップ完了後にテストを実行し、成功を確認する
     - 進捗をprogress.mdに記録する
     - アーキテクチャの変更があった場合はarchitecture.mdを更新する
     - 完了したらupdate-log.mdにバージョンごとの更新内容を記録する

## コーディング規約

1. **コードスタイル**
   - 既存のコードスタイルとパターンに従う
   - 関数名、変数名は一貫した命名規則を使用する
   - コメントは必要最小限にとどめ、コードの意図が明確になるようにする

2. **テスト**
   - 新機能実装後は必ずテストを実行する
   - バグが発見された場合は即座に修正する
   - リファクタリングを行う場合も、テストが成功することを確認する

3. **ドキュメント**
   - コードの変更に合わせてドキュメントも更新する
   - GDD.mdとtech-stack.mdは最新の状態を保つ
   - 新しい技術や概念を導入する場合は、適切にドキュメント化する
   - バージョンごとの更新内容はupdate-log.mdに記録する

## プロジェクト管理

1. **タスク管理**
   - 一度に1つのバージョン実装に集中する
   - 大きなタスクは小さなステップに分割して取り組む
   - 問題が発生した場合は、解決策を提案し、承認を得てから進める

2. **コミュニケーション**
   - 実装の進捗や問題点を明確に報告する
   - 不明点がある場合は質問をして明確にする
   - 技術的な決定や代替案がある場合は根拠を示して提案する
   - GDDの内容だけでは実装の詳細が不明確な場合は、質問や提案を行い、決定事項をGDDにフィードバックする

3. **品質管理**
   - 技術的負債を避け、コードの質を維持する
   - パフォーマンスとユーザー体験を常に考慮する
   - セキュリティの問題が発生しないように注意する

## 特別指示

1. **実装プロセス**
   - 必要なだけ考えて正確に実行する
   - 急ぐことなく、慎重に実装を進める
   - 指示が不明確な場合は質問して明確にする

2. **フィードバックへの対応**
   - フィードバックを受けた場合は迅速に対応する
   - 提案された変更が大きい場合は、影響範囲を評価してから実装する

3. **緊急修正**
   - 「緊急修正」と指示された場合は、他のタスクよりも優先して対応する
   - 修正後は必ずテストを実行し、新たな問題が発生していないことを確認する
